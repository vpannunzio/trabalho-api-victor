name: CI/CD Pipeline


on:
  push:
    branches: [ main, develop, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop, master ]
  
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production


env:
  NODE_VERSION: '18.x'
  NPM_CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  
  validate:
    name: 🔍 Validação de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Instalar dependências
      run: npm ci
    
    - name: 🔍 Verificar sintaxe do código
      run: |
        echo "Verificando sintaxe JavaScript..."
        node -c src/app.js
        node -c src/config/database.js
        echo "✅ Sintaxe válida"
    
    - name: 📋 Verificar estrutura do projeto
      run: |
        echo "Verificando estrutura do projeto..."
        test -f package.json || (echo "❌ package.json não encontrado" && exit 1)
        test -f src/app.js || (echo "❌ src/app.js não encontrado" && exit 1)
        test -d src/controllers || (echo "❌ src/controllers não encontrado" && exit 1)
        test -d src/routes || (echo "❌ src/routes não encontrado" && exit 1)
        test -d src/middleware || (echo "❌ src/middleware não encontrado" && exit 1)
        echo "✅ Estrutura do projeto válida"

  
  test-unit:
    name: 🧪 Testes Unitários
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Instalar dependências
      run: npm ci
    
    - name: 🧪 Executar testes unitários
      run: npm run test:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-unit-tests
        PORT: 3001
    
    - name: 📊 Gerar relatório de cobertura
      run: npm run test:coverage:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-unit-tests
        PORT: 3001
    
    - name: 📤 Upload coverage para Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: unit-tests
        fail_ci_if_error: false

  
  test-integration:
    name: 🔗 Testes de Integração
    runs-on: ubuntu-latest
    needs: validate
    
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Instalar dependências
      run: npm ci
    
    - name: 🧪 Executar testes de integração
      run: npm run test:integration
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-integration-tests
        PORT: 3002
    
    - name: 📊 Gerar relatório de cobertura
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-integration-tests
        PORT: 3002

 
  security-test:
    name: 🔒 Testes de Segurança
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Instalar dependências
      run: npm ci
    
    - name: 🔍 Audit de vulnerabilidades
      run: npm audit --audit-level moderate
    
    - name: 🧪 Executar testes de segurança
      run: npm test -- --grep "security"
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-security-tests
        PORT: 3003
      continue-on-error: true

 
  build:
    name: 🏗️ Build da Aplicação
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security-test]
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Instalar dependências de produção
      run: npm ci --only=production
    
    - name: 🏗️ Build da aplicação
      run: |
        echo "Criando build da aplicação..."
        mkdir -p dist
        cp -r src dist/
        cp package.json dist/
        cp package-lock.json dist/
        echo "✅ Build criado com sucesso"
    
    - name: 📦 Criar artefato
      run: |
        tar -czf victor-pos-api-${{ github.sha }}.tar.gz -C dist .
        echo "Artefato criado: victor-pos-api-${{ github.sha }}.tar.gz"
    
    - name: 📤 Upload artefato
      uses: actions/upload-artifact@v3
      with:
        name: victor-pos-api-build
        path: victor-pos-api-${{ github.sha }}.tar.gz
        retention-days: 30

  
  deploy-staging:
    name: 🚀 Deploy para Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 📥 Download artefato
      uses: actions/download-artifact@v3
      with:
        name: victor-pos-api-build
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🚀 Deploy para staging
      run: |
        echo "🚀 Iniciando deploy para staging..."
        tar -xzf victor-pos-api-*.tar.gz
        
        # Configurar variáveis de ambiente para staging
        echo "NODE_ENV=staging" > .env
        echo "PORT=3000" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET_STAGING }}" >> .env
        echo "RATE_LIMIT_WINDOW_MS=900000" >> .env
        echo "RATE_LIMIT_MAX_REQUESTS=100" >> .env
        
        # Aqui você configuraria o deploy real para seu servidor de staging
        echo "✅ Deploy para staging concluído"
    
    - name: 🏥 Health check staging
      run: |
        echo "Verificando saúde da aplicação em staging..."
        # Simular health check
        sleep 5
        echo "✅ Aplicação em staging está saudável"

  
  deploy-production:
    name: 🌟 Deploy para Produção
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 📥 Download artefato
      uses: actions/download-artifact@v3
      with:
        name: victor-pos-api-build
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🚀 Deploy para produção
      run: |
        echo "🌟 Iniciando deploy para produção..."
        tar -xzf victor-pos-api-*.tar.gz
        
        # Configurar variáveis de ambiente para produção
        echo "NODE_ENV=production" > .env
        echo "PORT=3000" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "RATE_LIMIT_WINDOW_MS=900000" >> .env
        echo "RATE_LIMIT_MAX_REQUESTS=100" >> .env
        
        # Aqui você configuraria o deploy real para seu servidor de produção
        echo "✅ Deploy para produção concluído"
    
    - name: 🏥 Health check produção
      run: |
        echo "Verificando saúde da aplicação em produção..."
        # Simular health check
        sleep 10
        echo "✅ Aplicação em produção está saudável"
    
    - name: 📢 Notificar deploy
      run: |
        echo "🎉 Deploy para produção realizado com sucesso!"
        echo "📅 Data: $(date)"
        echo "🏷️ Tag: ${{ github.ref_name }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"

 
  cleanup:
    name: 🧹 Limpeza
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Limpar artefatos antigos
      run: |
        echo "Limpando artefatos antigos..."
        # Aqui você poderia configurar limpeza de artefatos antigos
        echo "✅ Limpeza concluída"
